Utility to convert UDel formatted mobility files into XML mobility traces

= Introduction =

[u2tr] is a part of the MobiTrace toolbox of the OppoNet project. It generates a [TraceFileFormat XML mobility trace file] from a UDel generated mobility file.

= UDel =

UDel is a sophisticated mobility simulator developed at the University of Delaware (http://udelmodels.eecis.udel.edu). The tool uses sophisticated models of human behaviour and mobility patterns to generate mobility files in a text file format.

== Trace file format ==

(Note: The following is copied from the UDel website)

{{{
NodeID Time (XCoordinate,YCoordinate,ZCoordinate) NotUsed NotUsed HostType # NodeType FloorNum TaskNum 
}}}

HostType is a text string and may be MOBILE-HOST, which includes people and cars, BASE-STATION, FIXED-RELAY, SEMI-PERMANENT. These last three node types are specified by the map file. SEMI-PERMANENT nodes are for making three level hierarchies of infrastructures. 

NodeType
{{{
PERSON = 0
CAR = 1    1
UAV=2  //UAV (Unmanned Aerial Vehicles) not currently supported
BASESTATION = 3
FIXEDRELAT = 4
SEMIPERMANEN = 5
}}}

FloorNum
{{{
Person inside, the floor num is the floor that the person is on
Person outside simulated area or about to exit simulated area = 100000
Car outside simulated area or about to exit simulated area = 100001
Person walking outside = -999
Person driving in car = -997
Person in parking lot = -995
Person in subway station = -994
Car inside simulated area = -996
Outdoor infrastructure = -1000
Indoor infrastructure = the floor where the base station is located
}}}

TaskNum. The mobility model performs a sequence of tasks. The task number specifies which task is being performed. The task number is used extensively by the Mobility Parser Tool. If the parser is not used, then the task number can be set to zero.

=== Notes ===

A line is generates for each node each second of the simulation. QualNet interpolates the position between seconds.

The mobility parser generate a list of trips for each node.

 

= Usage =

Please refer to the general notes on the MobiTrace toolbox page. The script takes the following parameters:
{{{
  mobgen {options} {input file} {output file}
    options:
    -h|--help:    Display help text.
    -f|--force:   Force overwriting of an existing output file.
    -r|--random:  Simple normally distributed variation of the velocity and
                  speed. The standard deviation is fixed at 1/2 the value
                  (speed or pause).
}}}    
Example:
{{{
  mobgen -f textfile outfile.xml
}}}

= Input file format =

A simple flat text format is used for specification of mobility in this approach. It has been found to be somewhat easier than [TraceFileFormat XML traces] to generate by hand for small simulations and test cases. 

One event is speciﬁed per line in the input ﬁle, whose format is as follows:
{{{
{command} {time} {node} (...)
}}}
*command* is create, destroy or waypoint. *time* is in seconds from the beginning of the scenario. *node* is an integer uniquely identifying the node.

{{{
create {time} {node} {x y} (type)
}}}
*create* speciﬁes creation of a mobile node at a speciﬁed time and location. Type is an optional parameter, specifying the type of node to be created. This string must correspond to an !BasicMobility-derived module in the simulation.

{{{
destroy {time} {node}
}}}
*destroy* speciﬁes the destruction of a node. A negative or zero time means that the node will be destroyed node after the last leg of its journey is travelled and its ﬁnal pause is done. A destroy event with a speciﬁed time will destroy the node at that exact time, regardless of any remaining waypoint events.

{{{
waypoint {time} {node} {x y} {velocity} (pause)
}}}
*waypoint* speciﬁes the (x,y) coordinates of next waypoint, its velocity and, optionally, a pause time at the destination. Normally distributed variations of velocity and pause
times are supported. An activation time less than zero means that the time of travel is deduced from the distance to the next waypoint and the speciﬁed velocity. If however
the next consecutive event speciﬁes a time, the velocity is deduced from the distance and travel time.

== Example ==

{{{
# Test trace file

# Node 1
create  0.0 1  100 100 SimpleNode
waypoint -1 1 200 200 2.0 10.0
waypoint -1 1 300 300 3.0 10.0
waypoint -1 1 400 400 4.0 10.0
waypoint -1 1 500 500 5.0 10.0
destroy   -1 1

# Node 2
create    0.0 2 500 500 SimpleNode
waypoint 10.0 2 600 600 
waypoint 20.0 2 700 700
waypoint 40.0 2 800 800
destroy 100.0 2
}}}